// nes/gb/smc/ws rom viewer
// for HSP 3.x(windows)
// by takuya matsubara

//参考資料
// https://wiki.nesdev.com/w/index.php/INES
// https://gbdev.gg8.se/wiki/articles/The_Cartridge_Header
// https://snesdev.mesen.ca/wiki/index.php?title=Internal_ROM_Header
// http://daifukkat.su/docs/wsman/

screen 0,1200,750

KILO = 1024
MEGA = 1024*1024
sdim fbuf,2*MEGA+512

title "nes/gb/smc ROM viewer"
dialog "*",16,"file"
if(stat != 1){
  	end
}
filename = refstr
bload filename,fbuf	// ファイル読み込み
totalsize = strsize	// ファイルサイズ

//パスを除去
ptr = strlen(filename)
repeat
	if(ptr==0):break
	if(peek(filename,ptr-1)==$5c):break 	//
	ptr--
loop

cls
pos 8,8
print "Filename:"+strmid(filename,ptr,255)
print "Filesize:"+str(totalsize)+" BYTES"
if(instr(filename,0,".nes") > 0) or (instr(filename,0,".NES") > 0){
	gosub *nesfile
	end
}
if(instr(filename,0,".gb") > 0) or (instr(filename,0,".GB") > 0){
	gosub *gbfile
	end
}
if(instr(filename,0,".smc") > 0) or (instr(filename,0,".SMC") > 0){
	gosub *smcfile
	end
}
if(instr(filename,0,".ws") > 0) or (instr(filename,0,".WS") > 0){
	gosub *wsfile
	end
}
if(instr(filename,0,".wsc") > 0) or (instr(filename,0,".WSC") > 0){
	gosub *wsfile
	end
}
print "Unknown file"
stop
end
//-----
*smcfile
if (totalsize-(int(totalsize/KILO)*KILO))>0 {
	headersize = 512
}else{
	headersize = 0
}
prgsize = totalsize - headersize

ptr = $7FB0+headersize
gosub *readword
print "Maker code:"+strf("%04X",dat)

datcnt = 4
gosub *readbytes
print "Game code:"+string

datcnt = 7
gosub *readbytes
print "Fixed Value:"+string

gosub *readbyte
print "Expansion RAM size:"+strf("%02X",dat)

gosub *readbyte
print "Special version:"+strf("%02X",dat)

gosub *readbyte
print "Cartridge type:"+strf("%02X",dat)

datcnt = 21
gosub *readstring
print "Internal ROM Name:\""+string+"\""

gosub *readbyte
string = strf("%02X",dat)
string += "("
if (dat & $10):string += "FastROM & "
if (dat & $01){
	string += "HiROM)"
}else{
	string += "LoROM)"
}
print "Map Mode:"+string

gosub *readbyte
print "ROM Type:"+strf("%02X",dat)

gosub *readbyte
string = strf("%02X",dat)
dat = (1<<dat)*8*KILO
gosub *bit2string
print "ROM Size:"+string

gosub *readbyte
print "SRAM Size:"+strf("%02X",dat)

gosub *readbyte
string = strf("%02X",dat)
if(dat==$00):string+="(Japan/NTSC)"	
if(dat==$01):string+="(North America/NTSC)"		
if(dat==$02):string+="(Europe/PAL)"		
if(dat==$03):string+="(Sweden,Scandinavia/PAL)"		
if(dat==$04):string+="(Finland/PAL)"		
if(dat==$05):string+="(Denmark/PAL)"		
if(dat==$06):string+="(France/SECAM)"	
if(dat==$07):string+="(Netherlands/PAL)"		
if(dat==$08):string+="(Spain/PAL)"		
if(dat==$09):string+="(Germany/PAL)"		
if(dat==$0A):string+="(Italy/PAL)"		
if(dat==$0B):string+="(China/PAL)"		
if(dat==$0C):string+="(Indonesia/PAL)"		
if(dat==$0D):string+="(Korea/NTSC)"		
if(dat==$0E):string+="(Global)"	
if(dat==$0F):string+="(Canada/NTSC)"		
if(dat==$10):string+="(Brazil/PAL-M)"	
if(dat==$11):string+="(Australia/PAL)"	
print "Destination code:"+string

gosub *readbyte
print "Fixed value:"+strf("%02X",dat)

gosub *readbyte
print "Version:"+strf("%02X",dat)

gosub *readword
print "Complement check:"+strf("%04X",dat)
		
gosub *readword
print "Checksum:"+strf("%04X",dat)

ptr = 0+headersize
dumpsize = prgsize
ofsx = 440
ofsy = 32
gosub *dump

pos 320+64,8
dat = prgsize
gosub *byte2string
print "ROM size:"+string

/*
sum = 0
for i,0,prgsize
	dat = peek(fbuf,i+offset)
	sum = (sum + dat) & $ffff
next
dialog strf("checksum %04X",sum)

sumh = (sum >> 8)& $ff
suml = (sum & $ff)
sumhrev = sumh ^ $ff
sumlrev = suml ^ $ff
*/
	
stop
return

//-----
*nesfile
headersize = 16

// $4E $45 $53 $1A
if(peek(fbuf,0) != $4E){
	dialog "error:not nes header"
}

prgsize = 16*KILO*peek(fbuf,4) // prg size[16384 Byte]
chrsize = 8*KILO*peek(fbuf,5) // chr size[8192 Byte]
mapper = (peek(fbuf,6) >> 4)+(peek(fbuf,7) & $f0)
mirroring = peek(fbuf,6) & 1

dat = prgsize+chrsize
print "PRG+CHR size:"+str(dat)+" BYTES"
dat *= 8
gosub *bit2string
print string

print "Mapper :"+str(mapper)
if (mirroring==0){
	print "Mirroring:horizontal"
	print "(VRAM A10 <- PPU A11)"
}else{
	print "Mirroring:vertical"
	print "(VRAM A10 <- PPU A10)"
}

if (mapper!=2){
	ptr = headersize
	dumpsize = prgsize
	ofsx = 320
	ofsy = 32
	gosub *dump

	ptr = headersize+prgsize
	dumpsize = chrsize
	ofsx = 660
	ofsy = 32
	gosub *dump
}else{
	ptr = headersize
	dumpsize = prgsize
	ofsx = 320
	ofsy = 32
	gosub *dump

	lastbank = int(prgsize/(16*KILO))			// BANK数
	totalbank = 8								// あるべきBANK数
	if(lastbank < totalbank){
		dialog "バンク数が足りないので最終バンクをコピーします",2
		if(stat==6){
			// 途中はFFを書き込み
			for bank,lastbank,totalbank-1
				for i,0,16*KILO
					dat = $ff
					poke fbuf,i+(bank*16*KILO)+headersize,dat
				next
			next
			// 最終バンクだけコピー（本当はベクタだけでいい）
			bank = totalbank-1	// コピー先バンク
			for i,0,16*KILO
				dat = peek(fbuf,i+((lastbank-1)*16*KILO)+headersize)
				poke fbuf,i+(bank*16*KILO)+headersize,dat
			next
			prgsize = (16*totalbank*KILO)	// サイズ修正
			poke fbuf,4,totalbank		//ヘッダ修正

			dialog "nes",17,"file"
			if(stat==1){
				filename = refstr
				if (instr(filename,0,".nes")<0)and(instr(filename,0,".NES")<0){
					filename = filename+".nes"
				}
				bsave filename,fbuf,prgsize+headersize	//save file
			}
			ptr = headersize
			dumpsize = prgsize
			ofsx = 320
			ofsy = 32
			gosub *dump
		}
	}
}
pos 320,8
dat = prgsize
gosub *byte2string
print "PRG-ROM size:"+string

if(chrsize){
	pos 660,8
	dat = chrsize
	gosub *byte2string
	print "CHR-ROM size:"+string
}
stop
return
//----------
*gbfile
dat = totalsize*8	
gosub *bit2string
print string

ptr = $100

//0100-0103 Entry Point
datcnt = 4
gosub *readbytes
print "Entry Point:"+string

//0104-0133 Nintendo Logo
xa=0
ya=0
x=0
y=0
for i,0,($133-$104)+1
	dat = peek(fbuf,ptr) 
	for bitnum,0,8
		if(dat & ($80 >> bitnum)){
			color 0,0,0
		}else{
			color 0,255,0
		}
		pset x+xa+660,y+ya+32
		x++
		if(x>=4){
			x-=4
			y++
			if(y>=4){
				y-=4
				xa+=4					
				if(xa >= (12*4)){
					xa -= (12*4)
					ya += 4
				}
			}
		}
	next
	ptr++
next
color 0,0,0

//0134 Title(11文字)
datcnt = 11
gosub *readstring
print "Title:"+string

//013F-0142 Manufacturer Code
gosub *readlong
string = strf("%08X",dat)
print "Manufacturer Code:"+string

//0143 gameboy color Flag
gosub *readbyte
string = strf("%02X",dat)
if (dat==$80): string+="(support)"
if (dat==$C0): string+="(gameboy color only)"
print "gameboy color:"+string

//0144-0145 New Licensee Code
gosub *readword
string = strf("%04X",dat)
print "New Licensee Code:"+string

//0146 super gameboy Flag
gosub *readbyte
string = strf("%02X",dat)
if (dat==$00): string+="(not support)"
if (dat==$03): string+="(support)"
print "super gameboy:"+string

//0147 カートリッジ種類
gosub *readbyte
string = strf("%02X",dat)
if (dat==$00):string +="(ROM ONLY)"
if (dat==$01):string +="(MBC1)"
if (dat==$02):string +="(MBC1+RAM)"
if (dat==$03):string +="(MBC1+RAM+BATTERY)"
if (dat==$05):string +="(MBC2)"
if (dat==$06):string +="(MBC2+BATTERY)"
if (dat==$08):string +="(ROM+RAM)"
if (dat==$09):string +="(ROM+RAM+BATTERY)"
if (dat==$0b):string +="(MMM01)"
if (dat==$0c):string +="(MMM01+RAM)"
if (dat==$0d):string +="(MMM01+RAM+BATTERY)"
if (dat==$0f):string +="(MBC3+TIMER+BATTERY)"
if (dat==$10):string +="(MBC3+TIMER+RAM+BATTERY)"
if (dat==$11):string +="(MBC3)"
if (dat==$12):string +="(MBC3+RAM)"
if (dat==$13):string +="(MBC3+RAM+BATTERY)"
if (dat==$15):string +="(MBC4)"
if (dat==$16):string +="(MBC4+RAM)"
if (dat==$17):string +="(MBC4+RAM+BATTERY)"
if (dat==$19):string +="(MBC5)"
if (dat==$1a):string +="(MBC5+RAM)"
if (dat==$1b):string +="(MBC5+RAM+BATTERY)"
if (dat==$1c):string +="(MBC5+RUMBLE)"
if (dat==$1d):string +="(MBC5+RUMBLE+RAM)"
if (dat==$1e):string +="(MBC5+RUMBLE+RAM+BATTERY)"
if (dat==$fc):string +="(POCKET CAMERA)"
if (dat==$fd):string +="(BANDAI TAMA5)"
if (dat==$fe):string +="(HuC3)"
if (dat==$ff):string +="(HuC1+RAM+BATTERY)"
print "Cart. type"+string

//0148 ROM Size=32KB x (number+1))
gosub *readbyte
string = strf("%02X",dat)
string += "("+str(32*(dat+1))+" KB)"
print "ROM size:"+string

//0149 RAM Size
gosub *readbyte
string = strf("%02X",dat)
if (dat==$00):string += "(None)"
if (dat==$01):string += "(2KB)"
if (dat==$02):string += "(8KB)"
if (dat==$03):string += "(32KB)"
print "RAM size:"+string

//014A Destination Code
gosub *readbyte
string = strf("%02X",dat)
if (dat==0):string +="(Japanese)"
if (dat==1):string +="(Non-Japanese)"
print "Destination Code:"+string

//014B Old Licensee Code
gosub *readbyte
string = strf("%02X",dat)
print "Old Licensee Code:"+string

//014C Mask ROM Version number
gosub *readbyte
string = strf("%02X",dat)
print "Mask ROM Version number:"+string

//014D Header Checksum
gosub *readbyte
string = strf("%02X",dat)
print "Header Checksum:"+string

//014E-014F Global Checksum
adr = strf("%x",ptr)+":"
dat = peek(fbuf,ptr) << 8
ptr++
dat += peek(fbuf,ptr)
ptr++
string = strf("%04X",dat)
print "Global Checksum:"+string

dat = totalsize
gosub *byte2string
pos 320,8
print "PRG-ROM size:"+string

pos 660,8
print "logo"

ptr = 0
dumpsize = totalsize
ofsx = 320
ofsy = 32
gosub *dump
stop
return
//--------------
*wsfile
ptr = totalsize -10
	
gosub *readbyte
string = strf("%02X",dat)
print "Publisher ID:0x"+string

gosub *readbyte
if (dat & 1){
	string="WonderSwan Color"
}else{
	string="WonderSwan"
}
print "System:"+string

gosub *readbyte
string = strf("%02X",dat)
print "Game ID:0x"+string

gosub *readbyte
string = strf("%02X",dat)
print "Game revision:0x"+sting

gosub *readbyte
if dat==0:string = "1Mbit (128KB)"
if dat==1:string = "2Mbit (256KB)"
if dat==2:string = "4Mbit (512KB)"
if dat==3:string = "8Mbit (1MB)"
if dat==4:string = "16Mbit (2MB)"
if dat==5:string = "24Mbit (3MB)"
if dat==6:string = "32Mbit (4MB)"
if dat==7:string = "48Mbit (6MB)"
if dat==8:string = "64Mbit (8MB)"
if dat==9:string = "128Mbit (16MB)"
print "ROM size:"+string
                
gosub *readbyte
if dat==0:string = "None"
if dat==1:string = "64Kbit SRAM (8KB)"
if dat==2:string = "256Kbit SRAM (32KB)"
if dat==3:string = "1Mbit SRAM (128KB)"
if dat==4:string = "2Mbit SRAM (256KB)"
if dat==5:string = "4Mbit SRAM (512KB)"
if dat==$10:string = "1Kbit EEPROM"
if dat==$20:string = "16Kbit EEPROM"
if dat==$50:string = "8Kbit EEPROM"
print "Save size/type:"+string

gosub *readbyte
print "Flags"
if (dat & (1<<2)){
	string="1 cycle"
}else{
	string="3 cycle"
}
print  "ROM access speed:"+string

if (dat & (1<<1)){
	string="8-bit"
}else{
	string="16-bit"
}
print "ROM bus width:"+string

if (dat & (1<<0)){
	string="Vertical"
}else{
	string="Horizontal"
}
print  "Orientation:"+string
                
gosub *readbyte
if (dat & 1){
	string="yes"
}else{
	string="no"
}
print "RTC present:"+string

gosub *readword
string = strf("%04X",dat)
print "sum:"+string

ptr = 0
dumpsize = totalsize
ofsx = 320+48
ofsy = 32
gosub *dump
stop
return

//-------
*byte2string
string = str(dat)+" BYTES ="
if dat>=MEGA {
	string += str(dat/MEGA)+"MB"
}else{
	string += str(dat/KILO)+"KB"
}
return
//-------
*bit2string
kilobit = int(dat/KILO)
megabit = int(dat/MEGA)
string = "("+str(kilobit/8)+"KB = "
if(megabit==0){
	string += str(kilobit)+"Kbit)"
}else{
	string += str(megabit)+"Mbit)"
}
return
//-------
*readlong
dat = peek(fbuf,ptr)
ptr++
dat += (peek(fbuf,ptr) << 8)
ptr++
dat += (peek(fbuf,ptr) << 16)
ptr++
dat += (peek(fbuf,ptr) << 24)
ptr++
return
//-------
*readword
dat = peek(fbuf,ptr)
ptr++
dat += (peek(fbuf,ptr) << 8)
ptr++
return
//-------
*readbyte
dat = peek(fbuf,ptr)
ptr++
return
//-------
*readbytes
string = ""
for i,0,datcnt
    string += strf("%02X",peek(fbuf,ptr))+" "
	ptr++
next
return
//-------
*readstring
string = ""
for i,0,datcnt
	if(peek(fbuf,ptr)==0){
		string += "_"
	}else{
		string += strf("%c",peek(fbuf,ptr))
	}
	ptr++
next
return
//-------
*dump
if(dumpsize==0):return
//dumpwidth = 512
//pitch = int(32*KILO/dumpwidth)*dumpwidth
dumpwidth = 256
if(dumpsize < 256*KILO){
	pitch = 16*KILO
	step = 1
}else{
	if(dumpsize <= MEGA){
		pitch = 64*KILO
		step = 8
	}else{
		pitch = 128*KILO
		step = 16
	}
}

for i,0,dumpsize
	x = ((i/step) \ dumpwidth)+ofsx
	y = int((i/step)/dumpwidth)+ofsy
	if((i \ pitch)==0){
		redraw 1
		kb = int(i/KILO)
		color 255,0,0
		line x-64,y,x,y
		pos x-64,y+2
		print str(kb)+"KB"
		if(mapper==2){
			pos x-64,y+2+16
			print "(BANK"+str(i/pitch)+")"
		}
		redraw 0
	}
	dat = peek(fbuf,ptr)
	ptr++

//	if(dat!=$ff)and(dat!=$00):dat=128
	color 0,dat,0
	pset x,y
next

x = ofsx
y = int((dumpsize/step)/dumpwidth)+ofsy
color 255,0,0
line ofsx-1,ofsy-1,ofsx+dumpwidth,ofsy-1
line ofsx+dumpwidth,ofsy-1,ofsx+dumpwidth,y

line ofsx-1,ofsy,ofsx-1,y
line x-64,y,x+255,y
pos x-64,y+2
kb = int(dumpsize/KILO)
print str(kb)+"KB"
color 0,0,0
redraw 1
return

